Interrupt Vectors
00000 940C 004C JMP	__start|__text_start
Program Code (text area)
FILE: E:\Projects\Microproccesorss\Lab1\imagectaft\task_1\task_1.c
(0001) #include "iom128v.h"
(0002) #include "macros.h"
(0003) 
(0004) void delay(int ms)
__start|__text_start:
    0004C EFCF      LDI	R28,0xFF
    0004D E1D0      LDI	R29,0x10
    0004E BFCD      OUT	0x3D,R28
    0004F BFDE      OUT	0x3E,R29
    00050 51CE      SUBI	R28,0x1E
    00051 40D0      SBCI	R29,0
    00052 EA0A      LDI	R16,0xAA
    00053 8308      ST	Y,R16
    00054 2400      CLR	R0
    00055 E0EC      LDI	R30,0xC
    00056 E0F1      LDI	R31,1
    00057 E011      LDI	R17,1
    00058 30EC      CPI	R30,0xC
    00059 07F1      CPC	R31,R17
    0005A F011      BEQ	0x005D
    0005B 9201      ST	Z+,R0
    0005C CFFB      RJMP	0x0058
    0005D 8300      ST	Z,R16
    0005E E8EC      LDI	R30,0x8C
    0005F E0F0      LDI	R31,0
    00060 E0A0      LDI	R26,0
    00061 E0B1      LDI	R27,1
    00062 E010      LDI	R17,0
    00063 E000      LDI	R16,0
    00064 BF0B      OUT	0x3B,R16
    00065 39E8      CPI	R30,0x98
    00066 07F1      CPC	R31,R17
    00067 F021      BEQ	0x006C
    00068 95C8      LPM
    00069 9631      ADIW	R30,1
    0006A 920D      ST	X+,R0
    0006B CFF9      RJMP	0x0065
    0006C 940E 00C3 CALL	_main
_exit:
    0006E CFFF      RJMP	_exit
_delay:
  c1                   --> R20
  c2                   --> R22
  ms                   --> R16
    0006F 940E 0184 CALL	push_xgsetF000
    00071 2744      CLR	R20
    00072 2755      CLR	R21
    00073 C00B      RJMP	0x007F
(0005) {
(0006) 	int c1,c2;
(0007)     for(c1=0;c1<ms;c1++)
(0008)     	for(c2=0;c2<970;c2++)
    00074 2766      CLR	R22
    00075 2777      CLR	R23
(0009)         	NOP();
    00076 0000      NOP
    00077 5F6F      SUBI	R22,0xFF
    00078 4F7F      SBCI	R23,0xFF
    00079 3C6A      CPI	R22,0xCA
    0007A E0E3      LDI	R30,3
    0007B 077E      CPC	R23,R30
    0007C F3CC      BLT	0x0076
    0007D 5F4F      SUBI	R20,0xFF
    0007E 4F5F      SBCI	R21,0xFF
    0007F 1740      CP	R20,R16
    00080 0751      CPC	R21,R17
    00081 F394      BLT	0x0074
    00082 940C 0189 JMP	pop_xgsetF000
_showData_sevenIndc:
  i                    --> R10
  iter                 --> R12
  ports                --> R18
  seven_indc           --> R16
    00084 92AA      ST	-Y,R10
    00085 92CA      ST	-Y,R12
    00086 80CA      LDD	R12,Y+2
(0010) }
(0011) 
(0012) void showData_sevenIndc(char seven_indc[],char ports[],char iter)
(0013) {
(0014) 	char i;
(0015) 	for(i=0;i<iter;i++)
    00087 24AA      CLR	R10
    00088 C00E      RJMP	0x0097
(0016)     {
(0017)     	PORTC=ports[i];
    00089 2DEA      MOV	R30,R10
    0008A 27FF      CLR	R31
    0008B 0FE2      ADD	R30,R18
    0008C 1FF3      ADC	R31,R19
    0008D 8020      LD	R2,Z
    0008E BA25      OUT	0x15,R2
(0018)         PORTA=~seven_indc[i];
    0008F 2DEA      MOV	R30,R10
    00090 27FF      CLR	R31
    00091 0FE0      ADD	R30,R16
    00092 1FF1      ADC	R31,R17
    00093 8020      LD	R2,Z
    00094 9420      COM	R2
    00095 BA2B      OUT	0x1B,R2
    00096 94A3      INC	R10
    00097 14AC      CP	R10,R12
    00098 F380      BCS	0x0089
    00099 90C9      LD	R12,Y+
    0009A 90A9      LD	R10,Y+
    0009B 9508      RET
(0019)     }
(0020) }
(0021) 
(0022) char scan_buttons() // функция считывания состояния с кнопок
(0023) {
(0024)   char t, d=0;
_scan_buttons:
  d                    --> R16
  t                    --> R18
    0009C 2700      CLR	R16
(0025)   DDRA=0;		   // порт А настроен на вход для считывания данных с кнопок
    0009D 2422      CLR	R2
    0009E BA2A      OUT	0x1A,R2
(0026)   PORTD=0x80;	   // уст. лог. 1 на выводе PD7 для управления регистром клавиатуры
    0009F E880      LDI	R24,0x80
    000A0 BB82      OUT	0x12,R24
(0027)   t=PINA;		   // считывание значения с шины данных
    000A1 B329      IN	R18,0x19
(0028)   PORTD=0;		   // перевод регистра клавиатуры в высокоимпедансное состояние
    000A2 BA22      OUT	0x12,R2
(0029)   DDRA=0xFF;	   // настройка порта А на выход
    000A3 EF8F      LDI	R24,0xFF
    000A4 BB8A      OUT	0x1A,R24
(0030)   DDRG=0x01;	   // разрешение работы дешифратора
    000A5 E081      LDI	R24,1
    000A6 9380 0064 STS	0x64,R24
(0031)   PORTG=0;	 	   // установка на выходе PG0 лог. 0
    000A8 9220 0065 STS	0x65,R2
(0032)   // преобразование данных, полученных с кнопок для удобства использования
(0033)   if((t&0x10)==0) d=1;	
    000AA FD24      SBRC	R18,4
    000AB C001      RJMP	0x00AD
    000AC E001      LDI	R16,1
(0034)   if((t&0x20)==0) d=2;
    000AD FD25      SBRC	R18,5
    000AE C001      RJMP	0x00B0
    000AF E002      LDI	R16,2
(0035)   if((t&0x40)==0) d=3;
    000B0 FD26      SBRC	R18,6
    000B1 C001      RJMP	0x00B3
    000B2 E003      LDI	R16,3
(0036)   if((t&0x80)==0) d=4;
    000B3 FD27      SBRC	R18,7
    000B4 C001      RJMP	0x00B6
    000B5 E004      LDI	R16,4
(0037)   if((t&0x01)==0) d=5;
    000B6 FD20      SBRC	R18,0
    000B7 C001      RJMP	0x00B9
    000B8 E005      LDI	R16,5
(0038)   if((t&0x02)==0) d=6;
    000B9 FD21      SBRC	R18,1
    000BA C001      RJMP	0x00BC
    000BB E006      LDI	R16,6
(0039)   if((t&0x04)==0) d=7;
    000BC FD22      SBRC	R18,2
    000BD C001      RJMP	0x00BF
    000BE E007      LDI	R16,7
(0040)   if((t&0x08)==0) d=8;
    000BF FD23      SBRC	R18,3
    000C0 C001      RJMP	0x00C2
    000C1 E008      LDI	R16,0x8
(0041)   return d;	  // значение возвращается из функции с инверсией
    000C2 9508      RET
_main:
  k                    --> Y,+2
  j                    --> Y,+2
  i                    --> Y,+2
  open                 --> Y,+9
  clos                 --> Y,+5
  buss                 --> Y,+1
  d                    --> R22
  state                --> R20
    000C3 972D      SBIW	R28,0xD
(0042) }
(0043) 
(0044) void main()
(0045) {
(0046) 	char d=0;
    000C4 2766      CLR	R22
(0047) 	char i,j,k;
(0048)     char state=0;
    000C5 2744      CLR	R20
(0049) 	char clos[4]={0b00010111,0b00000111,0b01110111,0b01011011};
    000C6 E080      LDI	R24,0
    000C7 E091      LDI	R25,1
    000C8 01FE      MOVW	R30,R28
    000C9 9635      ADIW	R30,5
    000CA E004      LDI	R16,4
    000CB E010      LDI	R17,0
    000CC 93FA      ST	-Y,R31
    000CD 93EA      ST	-Y,R30
    000CE 939A      ST	-Y,R25
    000CF 938A      ST	-Y,R24
    000D0 940E 018E CALL	asgnblk
(0050)     char open[4]={0b01110111,0b00111101,0b00011111,0b01001100};
    000D2 E084      LDI	R24,4
    000D3 E091      LDI	R25,1
    000D4 01FE      MOVW	R30,R28
    000D5 9639      ADIW	R30,0x9
    000D6 E004      LDI	R16,4
    000D7 E010      LDI	R17,0
    000D8 93FA      ST	-Y,R31
    000D9 93EA      ST	-Y,R30
    000DA 939A      ST	-Y,R25
    000DB 938A      ST	-Y,R24
    000DC 940E 018E CALL	asgnblk
(0051)     char buss[4]={6,7,1,2};
    000DE E088      LDI	R24,0x8
    000DF E091      LDI	R25,1
    000E0 01FE      MOVW	R30,R28
    000E1 9631      ADIW	R30,1
    000E2 E004      LDI	R16,4
    000E3 E010      LDI	R17,0
    000E4 93FA      ST	-Y,R31
    000E5 93EA      ST	-Y,R30
    000E6 939A      ST	-Y,R25
    000E7 938A      ST	-Y,R24
    000E8 940E 018E CALL	asgnblk
(0052) 	DDRA=0xFF;
    000EA EF8F      LDI	R24,0xFF
    000EB BB8A      OUT	0x1A,R24
(0053)     DDRC=0b00000111;
    000EC E087      LDI	R24,7
    000ED BB84      OUT	0x14,R24
(0054)     PORTA=0;
    000EE 2422      CLR	R2
    000EF BA2B      OUT	0x1B,R2
(0055)     PORTC=0;
    000F0 BA25      OUT	0x15,R2
(0056)     PORTC=5;
    000F1 E085      LDI	R24,5
    000F2 BB85      OUT	0x15,R24
(0057)     DDRG=0b00000001;
    000F3 E081      LDI	R24,1
    000F4 9380 0064 STS	0x64,R24
(0058)     DDRD=0x80;
    000F6 E880      LDI	R24,0x80
    000F7 BB81      OUT	0x11,R24
    000F8 C088      RJMP	0x0181
(0059)     while(1)
(0060)     {
(0061)     	d=scan_buttons();
    000F9 DFA2      RCALL	_scan_buttons
    000FA 2F60      MOV	R22,R16
(0062)         
(0063)         if(state==0)
    000FB 2344      TST	R20
    000FC F529      BNE	0x0122
(0064)         {
(0065) 		 	PORTC=4;
    000FD E084      LDI	R24,4
    000FE BB85      OUT	0x15,R24
(0066) 			PORTA=0b00000001;
    000FF E081      LDI	R24,1
    00100 BB8B      OUT	0x1B,R24
(0067)         	showData_sevenIndc(clos,buss,4);
    00101 E084      LDI	R24,4
    00102 8388      ST	Y,R24
    00103 019E      MOVW	R18,R28
    00104 5F2F      SUBI	R18,0xFF
    00105 4F3F      SBCI	R19,0xFF
    00106 018E      MOVW	R16,R28
    00107 5F0B      SUBI	R16,0xFB
    00108 4F1F      SBCI	R17,0xFF
    00109 DF7A      RCALL	_showData_sevenIndc
(0068) 			if(d==1)
    0010A 3061      CPI	R22,1
    0010B F459      BNE	0x0117
(0069)             {
(0070)             	state=1;
    0010C E041      LDI	R20,1
(0071)                 showData_sevenIndc(clos,buss,4);
    0010D E084      LDI	R24,4
    0010E 8388      ST	Y,R24
    0010F 019E      MOVW	R18,R28
    00110 5F2F      SUBI	R18,0xFF
    00111 4F3F      SBCI	R19,0xFF
    00112 018E      MOVW	R16,R28
    00113 5F0B      SUBI	R16,0xFB
    00114 4F1F      SBCI	R17,0xFF
    00115 DF6E      RCALL	_showData_sevenIndc
(0072)             }
    00116 C067      RJMP	0x017E
(0073)             else 
(0074)             {
(0075)             	state=0;
    00117 2744      CLR	R20
(0076)                 showData_sevenIndc(clos,buss,4);
    00118 E084      LDI	R24,4
    00119 8388      ST	Y,R24
    0011A 019E      MOVW	R18,R28
    0011B 5F2F      SUBI	R18,0xFF
    0011C 4F3F      SBCI	R19,0xFF
    0011D 018E      MOVW	R16,R28
    0011E 5F0B      SUBI	R16,0xFB
    0011F 4F1F      SBCI	R17,0xFF
    00120 DF63      RCALL	_showData_sevenIndc
(0077)             }
(0078)         }
    00121 C05C      RJMP	0x017E
(0079)         else if(state==1)
    00122 3041      CPI	R20,1
    00123 F4C1      BNE	0x013C
(0080)         {
(0081) 			if(d==2)
    00124 3062      CPI	R22,2
    00125 F459      BNE	0x0131
(0082)             {
(0083)             	state=2;
    00126 E042      LDI	R20,2
(0084)                 showData_sevenIndc(clos,buss,4);
    00127 E084      LDI	R24,4
    00128 8388      ST	Y,R24
    00129 019E      MOVW	R18,R28
    0012A 5F2F      SUBI	R18,0xFF
    0012B 4F3F      SBCI	R19,0xFF
    0012C 018E      MOVW	R16,R28
    0012D 5F0B      SUBI	R16,0xFB
    0012E 4F1F      SBCI	R17,0xFF
    0012F DF54      RCALL	_showData_sevenIndc
(0085)             }
    00130 C04D      RJMP	0x017E
(0086)             else 
(0087)             {
(0088)             	state=0;
    00131 2744      CLR	R20
(0089)                 showData_sevenIndc(clos,buss,4);
    00132 E084      LDI	R24,4
    00133 8388      ST	Y,R24
    00134 019E      MOVW	R18,R28
    00135 5F2F      SUBI	R18,0xFF
    00136 4F3F      SBCI	R19,0xFF
    00137 018E      MOVW	R16,R28
    00138 5F0B      SUBI	R16,0xFB
    00139 4F1F      SBCI	R17,0xFF
    0013A DF49      RCALL	_showData_sevenIndc
(0090)             }
(0091)         }
    0013B C042      RJMP	0x017E
(0092)         else if(state==2)
    0013C 3042      CPI	R20,2
    0013D F4C1      BNE	0x0156
(0093)         {
(0094) 			if(d==3)
    0013E 3063      CPI	R22,3
    0013F F459      BNE	0x014B
(0095)             {
(0096)             	state=3;
    00140 E043      LDI	R20,3
(0097)                 showData_sevenIndc(clos,buss,4);
    00141 E084      LDI	R24,4
    00142 8388      ST	Y,R24
    00143 019E      MOVW	R18,R28
    00144 5F2F      SUBI	R18,0xFF
    00145 4F3F      SBCI	R19,0xFF
    00146 018E      MOVW	R16,R28
    00147 5F0B      SUBI	R16,0xFB
    00148 4F1F      SBCI	R17,0xFF
    00149 DF3A      RCALL	_showData_sevenIndc
(0098)             }
    0014A C033      RJMP	0x017E
(0099)             else 
(0100)             {
(0101)             	state=0;
    0014B 2744      CLR	R20
(0102)                 showData_sevenIndc(clos,buss,4);
    0014C E084      LDI	R24,4
    0014D 8388      ST	Y,R24
    0014E 019E      MOVW	R18,R28
    0014F 5F2F      SUBI	R18,0xFF
    00150 4F3F      SBCI	R19,0xFF
    00151 018E      MOVW	R16,R28
    00152 5F0B      SUBI	R16,0xFB
    00153 4F1F      SBCI	R17,0xFF
    00154 DF2F      RCALL	_showData_sevenIndc
(0103)             }
(0104)         }
    00155 C028      RJMP	0x017E
(0105)         else if(state==3)
    00156 3043      CPI	R20,3
    00157 F4C1      BNE	0x0170
(0106)         {
(0107) 			if(d==4)
    00158 3064      CPI	R22,4
    00159 F459      BNE	0x0165
(0108)             {
(0109)             	state=4;
    0015A E044      LDI	R20,4
(0110)                 showData_sevenIndc(clos,buss,4);
    0015B E084      LDI	R24,4
    0015C 8388      ST	Y,R24
    0015D 019E      MOVW	R18,R28
    0015E 5F2F      SUBI	R18,0xFF
    0015F 4F3F      SBCI	R19,0xFF
    00160 018E      MOVW	R16,R28
    00161 5F0B      SUBI	R16,0xFB
    00162 4F1F      SBCI	R17,0xFF
    00163 DF20      RCALL	_showData_sevenIndc
(0111)             }
    00164 C019      RJMP	0x017E
(0112)             else 
(0113)             {
(0114)             	state=0;
    00165 2744      CLR	R20
(0115)                 showData_sevenIndc(clos,buss,4);
    00166 E084      LDI	R24,4
    00167 8388      ST	Y,R24
    00168 019E      MOVW	R18,R28
    00169 5F2F      SUBI	R18,0xFF
    0016A 4F3F      SBCI	R19,0xFF
    0016B 018E      MOVW	R16,R28
    0016C 5F0B      SUBI	R16,0xFB
    0016D 4F1F      SBCI	R17,0xFF
    0016E DF15      RCALL	_showData_sevenIndc
(0116)             }
(0117)         }
    0016F C00E      RJMP	0x017E
(0118)         else if(state==4)
    00170 3044      CPI	R20,4
    00171 F461      BNE	0x017E
(0119)         {
(0120)          	PORTC=4;
    00172 E084      LDI	R24,4
    00173 BB85      OUT	0x15,R24
(0121) 			PORTA=0b00000001<1;
    00174 2422      CLR	R2
    00175 BA2B      OUT	0x1B,R2
(0122)         	showData_sevenIndc(open,buss,4);
    00176 8388      ST	Y,R24
    00177 019E      MOVW	R18,R28
    00178 5F2F      SUBI	R18,0xFF
    00179 4F3F      SBCI	R19,0xFF
    0017A 018E      MOVW	R16,R28
    0017B 5F07      SUBI	R16,0xF7
    0017C 4F1F      SBCI	R17,0xFF
    0017D DF06      RCALL	_showData_sevenIndc
(0123)         }
(0124)         delay(5000);
(0125) 
(0126)     }
(0127) }
FILE: <library>
    0017E E808      LDI	R16,0x88
    0017F E113      LDI	R17,0x13
    00180 DEEE      RCALL	_delay
    00181 CF77      RJMP	0x00F9
    00182 962D      ADIW	R28,0xD
    00183 9508      RET
push_xgsetF000:
    00184 937A      ST	-Y,R23
    00185 936A      ST	-Y,R22
    00186 935A      ST	-Y,R21
    00187 934A      ST	-Y,R20
    00188 9508      RET
pop_xgsetF000:
    00189 9149      LD	R20,Y+
    0018A 9159      LD	R21,Y+
    0018B 9169      LD	R22,Y+
    0018C 9179      LD	R23,Y+
    0018D 9508      RET
asgnblk:
    0018E 93AA      ST	-Y,R26
    0018F 93BA      ST	-Y,R27
    00190 93EA      ST	-Y,R30
    00191 93FA      ST	-Y,R31
    00192 920A      ST	-Y,R0
    00193 81AF      LDD	R26,Y+7
    00194 85B8      LDD	R27,Y+8
    00195 81ED      LDD	R30,Y+5
    00196 81FE      LDD	R31,Y+6
    00197 3000      CPI	R16,0
    00198 0701      CPC	R16,R17
    00199 F029      BEQ	0x019F
    0019A 9001      LD	R0,Z+
    0019B 920D      ST	X+,R0
    0019C 5001      SUBI	R16,1
    0019D 4010      SBCI	R17,0
    0019E CFF8      RJMP	0x0197
    0019F 9009      LD	R0,Y+
    001A0 91F9      LD	R31,Y+
    001A1 91E9      LD	R30,Y+
    001A2 91B9      LD	R27,Y+
    001A3 91A9      LD	R26,Y+
    001A4 9624      ADIW	R28,4
    001A5 9508      RET
