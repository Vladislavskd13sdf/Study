Interrupt Vectors
00000 940C 004E JMP	__text_start|__start
Program Code (text area)
FILE: E:\Projects\Microproccesorss\Lab1\imagectaft\task_1\task_1.c
(0001) #include "iom128v.h"
(0002) #include "macros.h"
(0003) 
(0004) void delay(int ms)
__text_start|__start:
    0004E EFCF      LDI	R28,0xFF
    0004F E1D0      LDI	R29,0x10
    00050 BFCD      OUT	0x3D,R28
    00051 BFDE      OUT	0x3E,R29
    00052 51CE      SUBI	R28,0x1E
    00053 40D0      SBCI	R29,0
    00054 EA0A      LDI	R16,0xAA
    00055 8308      ST	Y,R16
    00056 2400      CLR	R0
    00057 E1E0      LDI	R30,0x10
    00058 E0F1      LDI	R31,1
    00059 E011      LDI	R17,1
    0005A 31E0      CPI	R30,0x10
    0005B 07F1      CPC	R31,R17
    0005C F011      BEQ	0x005F
    0005D 9201      ST	Z+,R0
    0005E CFFB      RJMP	0x005A
    0005F 8300      ST	Z,R16
    00060 E8EC      LDI	R30,0x8C
    00061 E0F0      LDI	R31,0
    00062 E0A0      LDI	R26,0
    00063 E0B1      LDI	R27,1
    00064 E010      LDI	R17,0
    00065 E000      LDI	R16,0
    00066 BF0B      OUT	0x3B,R16
    00067 39EC      CPI	R30,0x9C
    00068 07F1      CPC	R31,R17
    00069 F021      BEQ	0x006E
    0006A 95C8      LPM
    0006B 9631      ADIW	R30,1
    0006C 920D      ST	X+,R0
    0006D CFF9      RJMP	0x0067
    0006E 940E 0114 CALL	_main
_exit:
    00070 CFFF      RJMP	_exit
_delay:
  c1                   --> R20
  c2                   --> R22
  ms                   --> R16
    00071 940E 0149 CALL	push_xgsetF000
    00073 2744      CLR	R20
    00074 2755      CLR	R21
    00075 C00B      RJMP	0x0081
(0005) {
(0006) 	int c1,c2;
(0007)     for(c1=0;c1<ms;c1++)
(0008)     	for(c2=0;c2<970;c2++)
    00076 2766      CLR	R22
    00077 2777      CLR	R23
(0009)         	NOP();
    00078 0000      NOP
    00079 5F6F      SUBI	R22,0xFF
    0007A 4F7F      SBCI	R23,0xFF
    0007B 3C6A      CPI	R22,0xCA
    0007C E0E3      LDI	R30,3
    0007D 077E      CPC	R23,R30
    0007E F3CC      BLT	0x0078
    0007F 5F4F      SUBI	R20,0xFF
    00080 4F5F      SBCI	R21,0xFF
    00081 1740      CP	R20,R16
    00082 0751      CPC	R21,R17
    00083 F394      BLT	0x0076
    00084 940C 014E JMP	pop_xgsetF000
_cout_open:
  pc                   --> Y,+4
  seg                  --> Y,+0
  i                    --> R20
    00086 934A      ST	-Y,R20
    00087 9728      SBIW	R28,0x8
(0010) }
(0011) void cout_open()
(0012) {
(0013)     char seg[4]={0b01110111,0b00111101,0b00011111,0b01101101};
    00088 E080      LDI	R24,0
    00089 E091      LDI	R25,1
    0008A 01FE      MOVW	R30,R28
    0008B E004      LDI	R16,4
    0008C E010      LDI	R17,0
    0008D 93FA      ST	-Y,R31
    0008E 93EA      ST	-Y,R30
    0008F 939A      ST	-Y,R25
    00090 938A      ST	-Y,R24
    00091 940E 0153 CALL	asgnblk
(0014)     char pc[4]={6,7,1,2};
    00093 E084      LDI	R24,4
    00094 E091      LDI	R25,1
    00095 01FE      MOVW	R30,R28
    00096 9634      ADIW	R30,4
    00097 E004      LDI	R16,4
    00098 E010      LDI	R17,0
    00099 93FA      ST	-Y,R31
    0009A 93EA      ST	-Y,R30
    0009B 939A      ST	-Y,R25
    0009C 938A      ST	-Y,R24
    0009D 940E 0153 CALL	asgnblk
(0015)     char i;
(0016)     DDRA=255;
    0009F EF8F      LDI	R24,0xFF
    000A0 BB8A      OUT	0x1A,R24
(0017)     for(i=0;i<4;i++)
    000A1 2744      CLR	R20
    000A2 C011      RJMP	0x00B4
(0018)     {
(0019)         PORTC=pc[i];
    000A3 01CE      MOVW	R24,R28
    000A4 9604      ADIW	R24,4
    000A5 2FE4      MOV	R30,R20
    000A6 27FF      CLR	R31
    000A7 0FE8      ADD	R30,R24
    000A8 1FF9      ADC	R31,R25
    000A9 8020      LD	R2,Z
    000AA BA25      OUT	0x15,R2
(0020)         PORTA=~seg[i];
    000AB 01CE      MOVW	R24,R28
    000AC 2FE4      MOV	R30,R20
    000AD 27FF      CLR	R31
    000AE 0FE8      ADD	R30,R24
    000AF 1FF9      ADC	R31,R25
    000B0 8020      LD	R2,Z
    000B1 9420      COM	R2
    000B2 BA2B      OUT	0x1B,R2
    000B3 9543      INC	R20
    000B4 3044      CPI	R20,4
    000B5 F368      BCS	0x00A3
    000B6 9628      ADIW	R28,0x8
    000B7 9149      LD	R20,Y+
    000B8 9508      RET
_cout_close:
  pc                   --> Y,+4
  seg                  --> Y,+0
  i                    --> R20
    000B9 934A      ST	-Y,R20
    000BA 9728      SBIW	R28,0x8
(0021)     }
(0022) }
(0023) void cout_close()
(0024) {
(0025)     char seg[4]={0b00010111,0b00000111,0b01110111,0b01011011};
    000BB E088      LDI	R24,0x8
    000BC E091      LDI	R25,1
    000BD 01FE      MOVW	R30,R28
    000BE E004      LDI	R16,4
    000BF E010      LDI	R17,0
    000C0 93FA      ST	-Y,R31
    000C1 93EA      ST	-Y,R30
    000C2 939A      ST	-Y,R25
    000C3 938A      ST	-Y,R24
    000C4 940E 0153 CALL	asgnblk
(0026)     char pc[4]={6,7,1,2};
    000C6 E08C      LDI	R24,0xC
    000C7 E091      LDI	R25,1
    000C8 01FE      MOVW	R30,R28
    000C9 9634      ADIW	R30,4
    000CA E004      LDI	R16,4
    000CB E010      LDI	R17,0
    000CC 93FA      ST	-Y,R31
    000CD 93EA      ST	-Y,R30
    000CE 939A      ST	-Y,R25
    000CF 938A      ST	-Y,R24
    000D0 940E 0153 CALL	asgnblk
(0027)     char i;
(0028)     DDRA=255;
    000D2 EF8F      LDI	R24,0xFF
    000D3 BB8A      OUT	0x1A,R24
(0029)     for(i=0;i<4;i++)
    000D4 2744      CLR	R20
    000D5 C011      RJMP	0x00E7
(0030)     {
(0031)         PORTC=pc[i];
    000D6 01CE      MOVW	R24,R28
    000D7 9604      ADIW	R24,4
    000D8 2FE4      MOV	R30,R20
    000D9 27FF      CLR	R31
    000DA 0FE8      ADD	R30,R24
    000DB 1FF9      ADC	R31,R25
    000DC 8020      LD	R2,Z
    000DD BA25      OUT	0x15,R2
(0032)         PORTA=~seg[i];
    000DE 01CE      MOVW	R24,R28
    000DF 2FE4      MOV	R30,R20
    000E0 27FF      CLR	R31
    000E1 0FE8      ADD	R30,R24
    000E2 1FF9      ADC	R31,R25
    000E3 8020      LD	R2,Z
    000E4 9420      COM	R2
    000E5 BA2B      OUT	0x1B,R2
    000E6 9543      INC	R20
    000E7 3044      CPI	R20,4
    000E8 F368      BCS	0x00D6
    000E9 9628      ADIW	R28,0x8
    000EA 9149      LD	R20,Y+
    000EB 9508      RET
(0033)     }
(0034) }
(0035) char get_key()
(0036) {
(0037)     char k;
(0038)     char button=0;
_get_key:
  k                    --> R18
  button               --> R16
    000EC 2700      CLR	R16
(0039)     PORTC=0;
    000ED 2422      CLR	R2
    000EE BA25      OUT	0x15,R2
(0040)     DDRA=0;
    000EF BA2A      OUT	0x1A,R2
(0041)     PORTD=128;
    000F0 E880      LDI	R24,0x80
    000F1 BB82      OUT	0x12,R24
(0042)     k=PINA;
    000F2 B329      IN	R18,0x19
(0043)     PORTD=0;
    000F3 BA22      OUT	0x12,R2
(0044)     if(k==~0b00010000) button=1;
    000F4 3E2F      CPI	R18,0xEF
    000F5 F411      BNE	0x00F8
    000F6 E001      LDI	R16,1
    000F7 C01B      RJMP	0x0113
(0045)     else if(k==~0b00100000) button=2;
    000F8 3D2F      CPI	R18,0xDF
    000F9 F411      BNE	0x00FC
    000FA E002      LDI	R16,2
    000FB C017      RJMP	0x0113
(0046)     else if(k==~0b01000000) button=3;
    000FC 3B2F      CPI	R18,0xBF
    000FD F411      BNE	0x0100
    000FE E003      LDI	R16,3
    000FF C013      RJMP	0x0113
(0047)     else if(k==~0b10000000) button=4;
    00100 372F      CPI	R18,0x7F
    00101 F411      BNE	0x0104
    00102 E004      LDI	R16,4
    00103 C00F      RJMP	0x0113
(0048)     else if(k==~0b00001000) button=5;
    00104 3F27      CPI	R18,0xF7
    00105 F411      BNE	0x0108
    00106 E005      LDI	R16,5
    00107 C00B      RJMP	0x0113
(0049)     else if(k==~0b00000100) button=6;
    00108 3F2B      CPI	R18,0xFB
    00109 F411      BNE	0x010C
    0010A E006      LDI	R16,6
    0010B C007      RJMP	0x0113
(0050)     else if(k==~0b00000010) button=7;
    0010C 3F2D      CPI	R18,0xFD
    0010D F411      BNE	0x0110
    0010E E007      LDI	R16,7
    0010F C003      RJMP	0x0113
(0051)     else if(k==~0b00000001) button=8;
    00110 3F2E      CPI	R18,0xFE
    00111 F409      BNE	0x0113
    00112 E008      LDI	R16,0x8
(0052)     return button;
    00113 9508      RET
(0053) }
(0054) void main()
(0055) {
(0056)     char state=0;
_main:
  state                --> R20
  key                  --> R22
    00114 2744      CLR	R20
(0057)     char key=0;
    00115 2766      CLR	R22
(0058)     DDRC=0b10000111;
    00116 E887      LDI	R24,0x87
    00117 BB84      OUT	0x14,R24
(0059)     DDRG=1;
    00118 E081      LDI	R24,1
    00119 9380 0064 STS	0x64,R24
(0060)     DDRD=0x80; // 128 or 0b10000000
    0011B E880      LDI	R24,0x80
    0011C BB81      OUT	0x11,R24
(0061)     cout_close();
    0011D DF9B      RCALL	_cout_close
    0011E C028      RJMP	0x0147
(0062)     while(1)
(0063)     {
(0064)     	while(key==0)
(0065) 	    {
(0066)     	    key=get_key();
    0011F DFCC      RCALL	_get_key
    00120 2F60      MOV	R22,R16
    00121 2366      TST	R22
    00122 F3E1      BEQ	0x011F
(0067) 	    }
(0068)         
(0069)         
(0070)         if((state==0)&&(key==3))
    00123 2344      TST	R20
    00124 F429      BNE	0x012A
    00125 3063      CPI	R22,3
    00126 F419      BNE	0x012A
(0071)         {
(0072)             state=1;
    00127 E041      LDI	R20,1
(0073)             cout_close();
    00128 DF90      RCALL	_cout_close
(0074)         }
    00129 C01B      RJMP	0x0145
(0075)         
(0076)         else if((state==1)&&(key==3))
    0012A 3041      CPI	R20,1
    0012B F429      BNE	0x0131
    0012C 3063      CPI	R22,3
    0012D F419      BNE	0x0131
(0077)         {
(0078)             state=2;
    0012E E042      LDI	R20,2
(0079)             cout_close();     
    0012F DF89      RCALL	_cout_close
(0080)         }
    00130 C014      RJMP	0x0145
(0081)         else if((state==2)&&(key==2))
    00131 3042      CPI	R20,2
    00132 F429      BNE	0x0138
    00133 3062      CPI	R22,2
    00134 F419      BNE	0x0138
(0082)         {
(0083)             state=3;
    00135 E043      LDI	R20,3
(0084)             cout_close();
    00136 DF82      RCALL	_cout_close
(0085)         }
    00137 C00D      RJMP	0x0145
(0086)         else if((state==3)&&(key==1))
    00138 3043      CPI	R20,3
    00139 F459      BNE	0x0145
    0013A 3061      CPI	R22,1
    0013B F449      BNE	0x0145
(0087)         {
(0088)             cout_open();
    0013C DF49      RCALL	_cout_open
(0089)             state=0;
    0013D 2744      CLR	R20
(0090)             delay(4000);
    0013E EA00      LDI	R16,0xA0
    0013F E01F      LDI	R17,0xF
    00140 DF30      RCALL	_delay
(0091)             cout_close();
    00141 DF77      RCALL	_cout_close
(0092)         }
    00142 C002      RJMP	0x0145
(0093)         
(0094)         while(key!=0)
(0095)         {
(0096)          key=get_key();
(0097)         }
(0098)     }
(0099) }
FILE: <library>
    00143 DFA8      RCALL	_get_key
    00144 2F60      MOV	R22,R16
    00145 2366      TST	R22
    00146 F7E1      BNE	0x0143
    00147 CFD9      RJMP	0x0121
    00148 9508      RET
push_xgsetF000:
    00149 937A      ST	-Y,R23
    0014A 936A      ST	-Y,R22
    0014B 935A      ST	-Y,R21
    0014C 934A      ST	-Y,R20
    0014D 9508      RET
pop_xgsetF000:
    0014E 9149      LD	R20,Y+
    0014F 9159      LD	R21,Y+
    00150 9169      LD	R22,Y+
    00151 9179      LD	R23,Y+
    00152 9508      RET
asgnblk:
    00153 93AA      ST	-Y,R26
    00154 93BA      ST	-Y,R27
    00155 93EA      ST	-Y,R30
    00156 93FA      ST	-Y,R31
    00157 920A      ST	-Y,R0
    00158 81AF      LDD	R26,Y+7
    00159 85B8      LDD	R27,Y+8
    0015A 81ED      LDD	R30,Y+5
    0015B 81FE      LDD	R31,Y+6
    0015C 3000      CPI	R16,0
    0015D 0701      CPC	R16,R17
    0015E F029      BEQ	0x0164
    0015F 9001      LD	R0,Z+
    00160 920D      ST	X+,R0
    00161 5001      SUBI	R16,1
    00162 4010      SBCI	R17,0
    00163 CFF8      RJMP	0x015C
    00164 9009      LD	R0,Y+
    00165 91F9      LD	R31,Y+
    00166 91E9      LD	R30,Y+
    00167 91B9      LD	R27,Y+
    00168 91A9      LD	R26,Y+
    00169 9624      ADIW	R28,4
    0016A 9508      RET
