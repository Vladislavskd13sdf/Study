Interrupt Vectors
00000 940C 0060 JMP	__start|__text_start
Program Code (text area)
FILE: E:\Projects\Microproccesorss\Lab1\imagectaft\task_4\SpeedClick.c
(0001) #include "iom128v.h"
(0002) #include "macros.h"
(0003) void delay(int t)
__start|__text_start:
    00060 EFCF      LDI	R28,0xFF
    00061 E1D0      LDI	R29,0x10
    00062 BFCD      OUT	0x3D,R28
    00063 BFDE      OUT	0x3E,R29
    00064 51CE      SUBI	R28,0x1E
    00065 40D0      SBCI	R29,0
    00066 EA0A      LDI	R16,0xAA
    00067 8308      ST	Y,R16
    00068 2400      CLR	R0
    00069 E3E3      LDI	R30,0x33
    0006A E0F1      LDI	R31,1
    0006B E011      LDI	R17,1
    0006C 33E3      CPI	R30,0x33
    0006D 07F1      CPC	R31,R17
    0006E F011      BEQ	0x0071
    0006F 9201      ST	Z+,R0
    00070 CFFB      RJMP	0x006C
    00071 8300      ST	Z,R16
    00072 E8EC      LDI	R30,0x8C
    00073 E0F0      LDI	R31,0
    00074 E0A0      LDI	R26,0
    00075 E0B1      LDI	R27,1
    00076 E010      LDI	R17,0
    00077 E000      LDI	R16,0
    00078 BF0B      OUT	0x3B,R16
    00079 3BEF      CPI	R30,0xBF
    0007A 07F1      CPC	R31,R17
    0007B F021      BEQ	0x0080
    0007C 95C8      LPM
    0007D 9631      ADIW	R30,1
    0007E 920D      ST	X+,R0
    0007F CFF9      RJMP	0x0079
    00080 940E 00CD CALL	_main
_exit:
    00082 CFFF      RJMP	_exit
_delay:
  c1                   --> R20
  c2                   --> R22
  t                    --> R16
    00083 940E 022C CALL	push_xgsetF000
    00085 2744      CLR	R20
    00086 2755      CLR	R21
    00087 C00B      RJMP	0x0093
(0004) {
(0005) 	int c1,c2;
(0006) 	for(c1=0;c1<t;c1++)
(0007)     {
(0008)     	for(c2=0;c2<970;c2++)
    00088 2766      CLR	R22
    00089 2777      CLR	R23
(0009)         {
(0010)         	NOP();
    0008A 0000      NOP
    0008B 5F6F      SUBI	R22,0xFF
    0008C 4F7F      SBCI	R23,0xFF
    0008D 3C6A      CPI	R22,0xCA
    0008E E0E3      LDI	R30,3
    0008F 077E      CPC	R23,R30
    00090 F3CC      BLT	0x008A
    00091 5F4F      SUBI	R20,0xFF
    00092 4F5F      SBCI	R21,0xFF
    00093 1740      CP	R20,R16
    00094 0751      CPC	R21,R17
    00095 F394      BLT	0x0088
    00096 940C 0231 JMP	pop_xgsetF000
(0011)         }
(0012)     }
(0013) }
(0014) 
(0015) char scan_buttons() // функция считывания состояния с кнопок
(0016) {
(0017)   char t, d=0;
_scan_buttons:
  d                    --> R16
  t                    --> R18
    00098 2700      CLR	R16
(0018)   DDRA=0;		   // порт А настроен на вход для считывания данных с кнопок
    00099 2422      CLR	R2
    0009A BA2A      OUT	0x1A,R2
(0019)   PORTD=0x80;	   // уст. лог. 1 на выводе PD7 для управления регистром клавиатуры
    0009B E880      LDI	R24,0x80
    0009C BB82      OUT	0x12,R24
(0020)   t=PINA;		   // считывание значения с шины данных
    0009D B329      IN	R18,0x19
(0021)   PORTD=0;		   // перевод регистра клавиатуры в высокоимпедансное состояние
    0009E BA22      OUT	0x12,R2
(0022)   DDRA=0xFF;	   // настройка порта А на выход
    0009F EF8F      LDI	R24,0xFF
    000A0 BB8A      OUT	0x1A,R24
(0023)   DDRG=0x01;	   // разрешение работы дешифратора
    000A1 E081      LDI	R24,1
    000A2 9380 0064 STS	0x64,R24
(0024)   PORTG=0;	 	   // установка на выходе PG0 лог. 0
    000A4 9220 0065 STS	0x65,R2
(0025)   // преобразование данных, полученных с кнопок для удобства использования
(0026)   if((t&0x10)==0) d=1;	
    000A6 FD24      SBRC	R18,4
    000A7 C001      RJMP	0x00A9
    000A8 E001      LDI	R16,1
(0027)   if((t&0x20)==0) d=2;
    000A9 FD25      SBRC	R18,5
    000AA C001      RJMP	0x00AC
    000AB E002      LDI	R16,2
(0028)   if((t&0x40)==0) d=3;
    000AC FD26      SBRC	R18,6
    000AD C001      RJMP	0x00AF
    000AE E003      LDI	R16,3
(0029)   if((t&0x80)==0) d=4;
    000AF FD27      SBRC	R18,7
    000B0 C001      RJMP	0x00B2
    000B1 E004      LDI	R16,4
(0030)   if((t&0x01)==0) d=5;
    000B2 FD20      SBRC	R18,0
    000B3 C001      RJMP	0x00B5
    000B4 E005      LDI	R16,5
(0031)   if((t&0x02)==0) d=1;
    000B5 FD21      SBRC	R18,1
    000B6 C001      RJMP	0x00B8
    000B7 E001      LDI	R16,1
(0032)   if((t&0x04)==0) d=1;
    000B8 FD22      SBRC	R18,2
    000B9 C001      RJMP	0x00BB
    000BA E001      LDI	R16,1
(0033)   if((t&0x08)==0) d=1;
    000BB FD23      SBRC	R18,3
    000BC C001      RJMP	0x00BE
    000BD E001      LDI	R16,1
(0034)   return d;	  // значение возвращается из функции с инверсией
    000BE 9508      RET
_segments:
  j                    --> R10
  i                    --> R12
    000BF 940E 0227 CALL	push_xgset003C
    000C1 0159      MOVW	R10,R18
    000C2 0168      MOVW	R12,R16
(0035) }
(0036) 
(0037) void segments(int i, int j)
(0038) {
(0039)  PORTC=i;
    000C3 BAC5      OUT	0x15,R12
(0040)  PORTA=~j;
    000C4 0115      MOVW	R2,R10
    000C5 9420      COM	R2
    000C6 9430      COM	R3
    000C7 BA2B      OUT	0x1B,R2
(0041)  delay(100);
    000C8 E604      LDI	R16,0x64
    000C9 E010      LDI	R17,0
    000CA DFB8      RCALL	_delay
    000CB 940C 021C JMP	pop_xgset003C
_main:
  t                    --> R22
  k                    --> R22
  item                 --> Y,+43
  seg                  --> Y,+40
  katod                --> Y,+32
  cicle                --> Y,+0
  c                    --> R10
  i                    --> R20
  j                    --> R10
    000CD 97E3      SBIW	R28,0x33
(0042) }
(0043) 
(0044) void main()
(0045) {
(0046)  	char cicle[4][8]={{0b00000000,0b00000000,0b00000000,0b00011000,0b00011000,0b00000000,0b00000000,0b00000000},
    000CE E080      LDI	R24,0
    000CF E091      LDI	R25,1
    000D0 01FE      MOVW	R30,R28
    000D1 E200      LDI	R16,0x20
    000D2 E010      LDI	R17,0
    000D3 93FA      ST	-Y,R31
    000D4 93EA      ST	-Y,R30
    000D5 939A      ST	-Y,R25
    000D6 938A      ST	-Y,R24
    000D7 940E 023C CALL	asgnblk
(0047)     				  {0b00000000,0b00000000,0b00111100,0b00100100,0b00100100,0b00111100,0b00000000,0b00000000},
(0048)                       {0b00000000,0b01111110,0b01000010,0b01000010,0b01000010,0b01000010,0b01111110,0b00000000},
(0049)                       {0b11111111,0b10000001,0b10000001,0b10000001,0b10000001,0b10000001,0b10000001,0b11111111}};
(0050)     char katod[]={0b00000001,0b00000010,0b00000100,0b00001000,0b00010000,0b00100000,0b01000000,0b10000000};
    000D9 E280      LDI	R24,0x20
    000DA E091      LDI	R25,1
    000DB 01FE      MOVW	R30,R28
    000DC 96B0      ADIW	R30,0x20
    000DD E008      LDI	R16,0x8
    000DE E010      LDI	R17,0
    000DF 93FA      ST	-Y,R31
    000E0 93EA      ST	-Y,R30
    000E1 939A      ST	-Y,R25
    000E2 938A      ST	-Y,R24
    000E3 940E 023C CALL	asgnblk
(0051)  	char seg[3]={0b00000101, 0b00011010, 0b01100000};
    000E5 E288      LDI	R24,0x28
    000E6 E091      LDI	R25,1
    000E7 01FE      MOVW	R30,R28
    000E8 96B8      ADIW	R30,0x28
    000E9 E003      LDI	R16,3
    000EA E010      LDI	R17,0
    000EB 93FA      ST	-Y,R31
    000EC 93EA      ST	-Y,R30
    000ED 939A      ST	-Y,R25
    000EE 938A      ST	-Y,R24
    000EF 940E 023C CALL	asgnblk
(0052) 	int item[4]={6,7,1,2};
    000F1 E28B      LDI	R24,0x2B
    000F2 E091      LDI	R25,1
    000F3 01FE      MOVW	R30,R28
    000F4 96BB      ADIW	R30,0x2B
    000F5 E008      LDI	R16,0x8
    000F6 E010      LDI	R17,0
    000F7 93FA      ST	-Y,R31
    000F8 93EA      ST	-Y,R30
    000F9 939A      ST	-Y,R25
    000FA 938A      ST	-Y,R24
    000FB 940E 023C CALL	asgnblk
(0053) 	char c,t,i,j,k;
(0054) 	DDRA=0xFF;
    000FD EF8F      LDI	R24,0xFF
    000FE BB8A      OUT	0x1A,R24
(0055)     DDRC=0b10000111;
    000FF E887      LDI	R24,0x87
    00100 BB84      OUT	0x14,R24
(0056)     PORTA=0;
    00101 2422      CLR	R2
    00102 BA2B      OUT	0x1B,R2
(0057) 	
(0058)     PORTC=0;
    00103 BA25      OUT	0x15,R2
(0059) 	PORTC=5;
    00104 E085      LDI	R24,5
    00105 BB85      OUT	0x15,R24
(0060) 	
(0061) 	PORTC=4;
    00106 E084      LDI	R24,4
    00107 BB85      OUT	0x15,R24
(0062) 	
(0063) 	PORTC=6;
    00108 E086      LDI	R24,6
    00109 BB85      OUT	0x15,R24
(0064) 	PORTC=7;
    0010A E087      LDI	R24,7
    0010B BB85      OUT	0x15,R24
(0065) 	PORTC=1;
    0010C E081      LDI	R24,1
    0010D BB85      OUT	0x15,R24
(0066) 	PORTC=2;
    0010E E082      LDI	R24,2
    0010F BB85      OUT	0x15,R24
(0067)     
(0068) 	DDRG=0b00000001;
    00110 E081      LDI	R24,1
    00111 9380 0064 STS	0x64,R24
(0069)     DDRD=0x80;
    00113 E880      LDI	R24,0x80
    00114 BB81      OUT	0x11,R24
    00115 C0FC      RJMP	0x0212
(0070)     while(1)
(0071)     {
(0072) 	 	t=scan_buttons();
    00116 DF81      RCALL	_scan_buttons
    00117 2F60      MOV	R22,R16
(0073) 		if(t==0)
    00118 2300      TST	R16
    00119 F409      BNE	0x011B
(0074) 		{
(0075) 		 continue;
    0011A C0F7      RJMP	0x0212
(0076) 		}
(0077) 		else if(t==1)
    0011B 3061      CPI	R22,1
    0011C F489      BNE	0x012E
(0078) 		{
(0079) 		 PORTC=4;
    0011D E084      LDI	R24,4
    0011E BB85      OUT	0x15,R24
(0080) 	 	 for(c=0;c<8;c++)
    0011F 24AA      CLR	R10
    00120 C009      RJMP	0x012A
(0081) 		 {
(0082) 		 	PORTA=(1<<c);
    00121 E001      LDI	R16,1
    00122 2D1A      MOV	R17,R10
    00123 940E 0236 CALL	lsl8
    00125 BB0B      OUT	0x1B,R16
(0083) 			delay(100);
    00126 E604      LDI	R16,0x64
    00127 E010      LDI	R17,0
    00128 DF5A      RCALL	_delay
    00129 94A3      INC	R10
    0012A 2D8A      MOV	R24,R10
    0012B 3088      CPI	R24,0x8
    0012C F3A0      BCS	0x0121
(0084) 		 }
(0085) 		}
    0012D C0E4      RJMP	0x0212
(0086) 		else if(t==2)
    0012E 3062      CPI	R22,2
    0012F F4D9      BNE	0x014B
(0087) 		{
(0088) 		 for(c=0;c<100;c++)
    00130 24AA      CLR	R10
    00131 C007      RJMP	0x0139
(0089) 		 {
(0090) 		 	PORTC=0b00000001+c;
    00132 2D8A      MOV	R24,R10
    00133 5F8F      SUBI	R24,0xFF
    00134 BB85      OUT	0x15,R24
(0091) 			delay(c);
    00135 2D0A      MOV	R16,R10
    00136 2711      CLR	R17
    00137 DF4B      RCALL	_delay
    00138 94A3      INC	R10
    00139 2D8A      MOV	R24,R10
    0013A 3684      CPI	R24,0x64
    0013B F3B0      BCS	0x0132
(0092) 		 }
(0093) 		 for(c=99,i=0;c>=0,i<100;c--,i++)
    0013C E683      LDI	R24,0x63
    0013D 2EA8      MOV	R10,R24
    0013E 2744      CLR	R20
    0013F C008      RJMP	0x0148
(0094) 		 {
(0095) 		 	PORTC=0b01100100-i;
    00140 E684      LDI	R24,0x64
    00141 1B84      SUB	R24,R20
    00142 BB85      OUT	0x15,R24
(0096) 			delay(c);
    00143 2D0A      MOV	R16,R10
    00144 2711      CLR	R17
    00145 DF3D      RCALL	_delay
    00146 94AA      DEC	R10
    00147 9543      INC	R20
    00148 3644      CPI	R20,0x64
    00149 F3B0      BCS	0x0140
(0097) 		 }
(0098) 		}
    0014A C0C7      RJMP	0x0212
(0099) 		else if(t==3)
    0014B 3063      CPI	R22,3
    0014C F009      BEQ	0x014E
    0014D C04B      RJMP	0x0199
(0100) 		{
(0101) 		 PORTC=4;
    0014E E084      LDI	R24,4
    0014F BB85      OUT	0x15,R24
(0102) 	 	 for(c=0;c<8;c++)
    00150 24AA      CLR	R10
    00151 C00B      RJMP	0x015D
(0103) 		 {
(0104) 		 	PORTA+=0b00000001<<c;
    00152 E001      LDI	R16,1
    00153 2D1A      MOV	R17,R10
    00154 940E 0236 CALL	lsl8
    00156 B22B      IN	R2,0x1B
    00157 0E20      ADD	R2,R16
    00158 BA2B      OUT	0x1B,R2
(0105) 			delay(100);
    00159 E604      LDI	R16,0x64
    0015A E010      LDI	R17,0
    0015B DF27      RCALL	_delay
    0015C 94A3      INC	R10
    0015D 2D8A      MOV	R24,R10
    0015E 3088      CPI	R24,0x8
    0015F F390      BCS	0x0152
(0106) 		 }
(0107) 		 for(c=0;c<8;c++)
    00160 24AA      CLR	R10
    00161 C00B      RJMP	0x016D
(0108) 		 {
(0109) 		 	PORTA+=~0b00000000<<c;
    00162 EF0F      LDI	R16,0xFF
    00163 2D1A      MOV	R17,R10
    00164 940E 0236 CALL	lsl8
    00166 B22B      IN	R2,0x1B
    00167 0E20      ADD	R2,R16
    00168 BA2B      OUT	0x1B,R2
(0110) 			delay(100);
    00169 E604      LDI	R16,0x64
    0016A E010      LDI	R17,0
    0016B DF17      RCALL	_delay
    0016C 94A3      INC	R10
    0016D 2D8A      MOV	R24,R10
    0016E 3088      CPI	R24,0x8
    0016F F390      BCS	0x0162
(0111) 		 }
(0112) 		 for(c=0;c<8;c++)
    00170 24AA      CLR	R10
    00171 C00F      RJMP	0x0181
(0113) 		 {
(0114) 		 	PORTA+=0b10000000>>c;
    00172 2D2A      MOV	R18,R10
    00173 2733      CLR	R19
    00174 E800      LDI	R16,0x80
    00175 E010      LDI	R17,0
    00176 940E 0215 CALL	asr16
    00178 B22B      IN	R2,0x1B
    00179 2433      CLR	R3
    0017A 0E20      ADD	R2,R16
    0017B 1E31      ADC	R3,R17
    0017C BA2B      OUT	0x1B,R2
(0115) 			delay(100);
    0017D E604      LDI	R16,0x64
    0017E E010      LDI	R17,0
    0017F DF03      RCALL	_delay
    00180 94A3      INC	R10
    00181 2D8A      MOV	R24,R10
    00182 3088      CPI	R24,0x8
    00183 F370      BCS	0x0172
(0116) 		 }
(0117) 		 for(c=0;c<8;c++)
    00184 24AA      CLR	R10
    00185 C00F      RJMP	0x0195
(0118) 		 {
(0119) 		 	PORTA+=~0b01111111>>c;
    00186 2D2A      MOV	R18,R10
    00187 2733      CLR	R19
    00188 E800      LDI	R16,0x80
    00189 EF1F      LDI	R17,0xFF
    0018A 940E 0215 CALL	asr16
    0018C B22B      IN	R2,0x1B
    0018D 2433      CLR	R3
    0018E 0E20      ADD	R2,R16
    0018F 1E31      ADC	R3,R17
    00190 BA2B      OUT	0x1B,R2
(0120) 			delay(100);
    00191 E604      LDI	R16,0x64
    00192 E010      LDI	R17,0
    00193 DEEF      RCALL	_delay
    00194 94A3      INC	R10
    00195 2D8A      MOV	R24,R10
    00196 3088      CPI	R24,0x8
    00197 F370      BCS	0x0186
(0121) 		 }
(0122) 		}
    00198 C079      RJMP	0x0212
(0123) 		else if(t==4)
    00199 3064      CPI	R22,4
    0019A F009      BEQ	0x019C
    0019B C042      RJMP	0x01DE
(0124) 		{
(0125) 		 for(i=0;i<4;i++)
    0019C 2744      CLR	R20
    0019D C01C      RJMP	0x01BA
(0126)   		 {
(0127)    		  for(j=0;j<3;j++)
    0019E 24AA      CLR	R10
    0019F C014      RJMP	0x01B4
(0128)    		  {
(0129)    		   segments(item[i],seg[j]);
    001A0 01CE      MOVW	R24,R28
    001A1 9688      ADIW	R24,0x28
    001A2 2DEA      MOV	R30,R10
    001A3 27FF      CLR	R31
    001A4 0FE8      ADD	R30,R24
    001A5 1FF9      ADC	R31,R25
    001A6 8120      LD	R18,Z
    001A7 2733      CLR	R19
    001A8 01CE      MOVW	R24,R28
    001A9 968B      ADIW	R24,0x2B
    001AA 2FE4      MOV	R30,R20
    001AB 27FF      CLR	R31
    001AC 0FEE      LSL	R30
    001AD 1FFF      ROL	R31
    001AE 0FE8      ADD	R30,R24
    001AF 1FF9      ADC	R31,R25
    001B0 8100      LD	R16,Z
    001B1 8111      LDD	R17,Z+1
    001B2 DF0C      RCALL	_segments
    001B3 94A3      INC	R10
    001B4 2D8A      MOV	R24,R10
    001B5 3083      CPI	R24,3
    001B6 F348      BCS	0x01A0
(0130)    		  }
(0131)    		  PORTA=0xFF;
    001B7 EF8F      LDI	R24,0xFF
    001B8 BB8B      OUT	0x1B,R24
    001B9 9543      INC	R20
    001BA 3044      CPI	R20,4
    001BB F310      BCS	0x019E
(0132)   		 }
(0133)   		 for(i=3;i>=0;i--)
    001BC E043      LDI	R20,3
    001BD C01D      RJMP	0x01DB
(0134)   		 {
(0135)    		  for(j=2;j>=0;j--)
    001BE E082      LDI	R24,2
    001BF 2EA8      MOV	R10,R24
    001C0 C014      RJMP	0x01D5
(0136)    		  {
(0137)    		   segments(item[i],seg[j]);
    001C1 01CE      MOVW	R24,R28
    001C2 9688      ADIW	R24,0x28
    001C3 2DEA      MOV	R30,R10
    001C4 27FF      CLR	R31
    001C5 0FE8      ADD	R30,R24
    001C6 1FF9      ADC	R31,R25
    001C7 8120      LD	R18,Z
    001C8 2733      CLR	R19
    001C9 01CE      MOVW	R24,R28
    001CA 968B      ADIW	R24,0x2B
    001CB 2FE4      MOV	R30,R20
    001CC 27FF      CLR	R31
    001CD 0FEE      LSL	R30
    001CE 1FFF      ROL	R31
    001CF 0FE8      ADD	R30,R24
    001D0 1FF9      ADC	R31,R25
    001D1 8100      LD	R16,Z
    001D2 8111      LDD	R17,Z+1
    001D3 DEEB      RCALL	_segments
    001D4 94AA      DEC	R10
    001D5 2D8A      MOV	R24,R10
    001D6 3080      CPI	R24,0
    001D7 F748      BCC	0x01C1
(0138)    		  }
(0139)    		  PORTA=0xFF;
    001D8 EF8F      LDI	R24,0xFF
    001D9 BB8B      OUT	0x1B,R24
    001DA 954A      DEC	R20
    001DB 3040      CPI	R20,0
    001DC F708      BCC	0x01BE
(0140)   		 }
(0141) 		}
    001DD C034      RJMP	0x0212
(0142) 		else if(t==5)
    001DE 3065      CPI	R22,5
    001DF F009      BEQ	0x01E1
    001E0 C031      RJMP	0x0212
(0143) 		{
(0144) 		 for(i=0;i<4;i++)
    001E1 2744      CLR	R20
    001E2 C02D      RJMP	0x0210
(0145)          {
(0146)         	for(k=0;k<5;k++)
    001E3 2766      CLR	R22
    001E4 C028      RJMP	0x020D
(0147)         	{
(0148)         		for(j=0;j<8;j++)
    001E5 24AA      CLR	R10
    001E6 C022      RJMP	0x0209
(0149)         		{
(0150)     				PORTC=5;
    001E7 E085      LDI	R24,5
    001E8 BB85      OUT	0x15,R24
(0151)         			PORTA=cicle[i][j];
    001E9 01CE      MOVW	R24,R28
    001EA 2E24      MOV	R2,R20
    001EB 2433      CLR	R3
    001EC 0C22      LSL	R2
    001ED 1C33      ROL	R3
    001EE 0C22      LSL	R2
    001EF 1C33      ROL	R3
    001F0 0C22      LSL	R2
    001F1 1C33      ROL	R3
    001F2 0E28      ADD	R2,R24
    001F3 1E39      ADC	R3,R25
    001F4 2DEA      MOV	R30,R10
    001F5 27FF      CLR	R31
    001F6 0DE2      ADD	R30,R2
    001F7 1DF3      ADC	R31,R3
    001F8 8020      LD	R2,Z
    001F9 BA2B      OUT	0x1B,R2
(0152)         			PORTC=0;
    001FA 2422      CLR	R2
    001FB BA25      OUT	0x15,R2
(0153)         			PORTA=~katod[j];
    001FC 01CE      MOVW	R24,R28
    001FD 9680      ADIW	R24,0x20
    001FE 2DEA      MOV	R30,R10
    001FF 27FF      CLR	R31
    00200 0FE8      ADD	R30,R24
    00201 1FF9      ADC	R31,R25
    00202 8020      LD	R2,Z
    00203 9420      COM	R2
    00204 BA2B      OUT	0x1B,R2
(0154)         			delay(2);
(0155)         		}
(0156)          	}
(0157)          }
(0158) 		}
(0159)     }   
(0160) }
FILE: <library>
    00205 E002      LDI	R16,2
    00206 E010      LDI	R17,0
    00207 DE7B      RCALL	_delay
    00208 94A3      INC	R10
    00209 2D8A      MOV	R24,R10
    0020A 3088      CPI	R24,0x8
    0020B F2D8      BCS	0x01E7
    0020C 9563      INC	R22
    0020D 3065      CPI	R22,5
    0020E F2B0      BCS	0x01E5
    0020F 9543      INC	R20
    00210 3044      CPI	R20,4
    00211 F288      BCS	0x01E3
    00212 CF03      RJMP	0x0116
    00213 96E3      ADIW	R28,0x33
    00214 9508      RET
asr16:
    00215 2322      TST	R18
    00216 F021      BEQ	0x021B
    00217 9515      ASR	R17
    00218 9507      ROR	R16
    00219 952A      DEC	R18
    0021A CFFA      RJMP	asr16
    0021B 9508      RET
pop_xgset003C:
    0021C 90A9      LD	R10,Y+
    0021D 90B9      LD	R11,Y+
    0021E 90C9      LD	R12,Y+
    0021F 90D9      LD	R13,Y+
    00220 9508      RET
push_xgsetF0FC:
    00221 937A      ST	-Y,R23
    00222 936A      ST	-Y,R22
push_xgset30FC:
    00223 935A      ST	-Y,R21
    00224 934A      ST	-Y,R20
push_xgset00FC:
    00225 92FA      ST	-Y,R15
    00226 92EA      ST	-Y,R14
push_xgset003C:
    00227 92DA      ST	-Y,R13
    00228 92CA      ST	-Y,R12
    00229 92BA      ST	-Y,R11
    0022A 92AA      ST	-Y,R10
    0022B 9508      RET
push_xgsetF000:
    0022C 937A      ST	-Y,R23
    0022D 936A      ST	-Y,R22
    0022E 935A      ST	-Y,R21
    0022F 934A      ST	-Y,R20
    00230 9508      RET
pop_xgsetF000:
    00231 9149      LD	R20,Y+
    00232 9159      LD	R21,Y+
    00233 9169      LD	R22,Y+
    00234 9179      LD	R23,Y+
    00235 9508      RET
lsl8:
    00236 2311      TST	R17
    00237 F019      BEQ	0x023B
    00238 0F00      LSL	R16
    00239 951A      DEC	R17
    0023A CFFB      RJMP	lsl8
    0023B 9508      RET
asgnblk:
    0023C 93AA      ST	-Y,R26
    0023D 93BA      ST	-Y,R27
    0023E 93EA      ST	-Y,R30
    0023F 93FA      ST	-Y,R31
    00240 920A      ST	-Y,R0
    00241 81AF      LDD	R26,Y+7
    00242 85B8      LDD	R27,Y+8
    00243 81ED      LDD	R30,Y+5
    00244 81FE      LDD	R31,Y+6
    00245 3000      CPI	R16,0
    00246 0701      CPC	R16,R17
    00247 F029      BEQ	0x024D
    00248 9001      LD	R0,Z+
    00249 920D      ST	X+,R0
    0024A 5001      SUBI	R16,1
    0024B 4010      SBCI	R17,0
    0024C CFF8      RJMP	0x0245
    0024D 9009      LD	R0,Y+
    0024E 91F9      LD	R31,Y+
    0024F 91E9      LD	R30,Y+
    00250 91B9      LD	R27,Y+
    00251 91A9      LD	R26,Y+
    00252 9624      ADIW	R28,4
    00253 9508      RET
